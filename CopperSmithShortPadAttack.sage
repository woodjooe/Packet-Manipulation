import random
import binascii


def coppersmith_short_pad(C1, C2, N, e = 3, eps = 1/25):
    P.<x, y> = PolynomialRing(Zmod(N))
    P2.<y> = PolynomialRing(Zmod(N))

    g1 = (x^e - C1).change_ring(P2)
    g2 = ((x + y)^e - C2).change_ring(P2)
 
    # Changes the base ring to Z_N[y] and finds resultant of g1 and g2 in x
    res = g1.resultant(g2, variable=x)

    # coppersmith's small_roots only works over univariate polynomial rings, so we 
    # convert the resulting polynomial to its univariate form and take the coefficients modulo N
    # Then we can call the sage's small_roots function and obtain the delta between m_1 and m_2.
    # Play around with these parameters: (epsilon, beta, X)
    roots = res.univariate_polynomial().change_ring(Zmod(N))\
        .small_roots(epsilon=eps)

    return roots[0]

def franklin_reiter(C1, C2, N, r, e=3):
    P.<x> = PolynomialRing(Zmod(N))
    equations = [x ^ e - C1, (x + r) ^ e - C2]
    g1, g2 = equations
    return -composite_gcd(g1,g2).coefficients()[0]


# I should implement something to divide the resulting message by some power of 2^i
def recover_message(C1, C2, N, e = 3):
    delta = coppersmith_short_pad(C1, C2, N)
    recovered = franklin_reiter(C1, C2, N, delta)
    return recovered
    
def composite_gcd(g1,g2):
    return g1.monic() if g2 == 0 else composite_gcd(g2, g1 % g2)

# Takes a long time for larger values and smaller epsilon
def test():

    N_E_C1_C2_file = open("N_E_C1_C2.txt", "rb")

    ''' N=17239653555729308464049438184920371089879081148402291800380594759517665804698359052648921465219887554469533537465122062104900480567488997794605293481770139146098702102563250193298500864238250949982552595159802814788612573898410252974926866757617491510437384709301937357695288829868010397984533999482461397333141208905813094732501385628605554793978927603376904138986551086256407424185029648833489655496424708493511895902919181646372064531235987733921846952446773365611469842532440322381367711369625814351911101284458643213930109512205598526068165522864217435748337932540742524768583448250580752519750464577065964352977
     
    e = 3

    C1=13175003036863667196942513292694968596416358978180161071303452036410540532173168346750529678618211889593383360401424579955755705622190253572097011442131072902915590142612797643938856648909870802865212767403637168828430386137469125656789741186857713829536853505429814378800613302120283599371978033275302750132168454790535990536208859272660690444899082714379443726328537534207728669878230057596196140486543134765308969395455757684929226355302273797776625885589390931399587636661951929692301622120919439966993552988308377648806605249960722883740016244502333610624839395417719868897187222402414778840330061563591095882060

    C2=6745609988326975500494946093946200660582246734067949215053454725654520718510784822743437151082328481085158864916222352158304493885412628201892340982714603195045732096142815528298716259890199510030243313701105532721573233998410858598436213329080181314143465424003010247895244965972546814572087769818874873676976571705897147270041348810934624860075800297429843665222132183602308019773804076604772399261582952041522448829626466310212683662688702919409435793751387440570548382437286219555720214547867676972411331351935643145456944092378118096907434713704682230519150106744568807323587946640858257258142622205151934855903
    '''


    N = int.from_bytes(N_E_C1_C2_file.readline()[:-1])
    e = int.from_bytes(N_E_C1_C2_file.readline()[:-1])
    #N = N_E_C1_C2_file.readline()[:-1]
    #e = N_E_C1_C2_file.readline()[:-1]
    #C1 = N_E_C1_C2_file.readline()[:-1]
    #C2 = N_E_C1_C2_file.readline()[:-1]
    
    C1 = int.from_bytes(N_E_C1_C2_file.readline()[:-1])
    C2 = int.from_bytes(N_E_C1_C2_file.readline()[:-1])
    N_E_C1_C2_file.close()
    print(N)
    print(e)
    print(C1)
    print(C2)
    # Using eps = 1/125 is slooooowww
    Cop = coppersmith_short_pad(C1, C2, N, eps=0.015625)
    Plaintext = recover_message(C1, C2, N)
    print(Cop)
    print(Plaintext)
    
    Plain_file = open("Plain.txt", "w")
    Plain_file.write(Plaintext)
    Plain_file.close()
    
if __name__ == "__main__":
    test()
